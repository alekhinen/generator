#!/usr/bin/env node

var program = require('commander');
var mkdirp  = require('mkdirp');
var os      = require('os');
var fs      = require('fs');
var path    = require('path');
var pkg     = require('../package.json');
var version = pkg.version;

// ----------------------------------------------------------------------------
// CLI ------------------------------------------------------------------------
// ----------------------------------------------------------------------------

program
  .version(version)
  .usage('[options] [dir]')
  .option('-t, --template <engine>', 
    'add template <engine> support (jade|ejs|hbs|hjs)  (defaults to jade)')
  .option('-c, --css <engine>', 
    'add stylesheet <engine> support (less|stylus|compass) (defaults to plain css)')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

// ----------------------------------------------------------------------------
// Constants ------------------------------------------------------------------
// ----------------------------------------------------------------------------

// TODO: this still feels dirty

var DESTINATION_PATH, APP_NAME, EOL, INDEX, 
  USERS, CSS, LESS, STYLUS, COMPASS, APP, WWW;

// destination path
DESTINATION_PATH = program.args.shift() || '.';
// app name
APP_NAME = path.basename(path.resolve(DESTINATION_PATH));
// end-of-line code
EOL = os.EOL


function load_template(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

// routes
INDEX = load_template('js/routes/index.js');
USERS = load_template('js/routes/users.js');
// css
CSS     = fs.readFileSync(__dirname + '/../templates/css/style.css', 'utf-8');
LESS    = fs.readFileSync(__dirname + '/../templates/css/style.less', 'utf-8');
STYLUS  = fs.readFileSync(__dirname + '/../templates/css/style.styl', 'utf-8');
COMPASS = fs.readFileSync(__dirname + '/../templates/css/style.scss', 'utf-8');
// app
APP = fs.readFileSync(__dirname + '/../templates/js/app.js', 'utf-8');
WWW = fs.readFileSync(__dirname + '/../templates/js/www', 'utf-8');

// ----------------------------------------------------------------------------
// Application Generator ------------------------------------------------------
// ----------------------------------------------------------------------------

(function createApplication(path) {
  emptyDirectory( path, function (empty) {
    if ( empty || program.force ) {
      createApplicationAt( path );
    } else {
      program.confirm('destination is not empty, continue? ', function (ok) {
        if ( ok ) {
          process.stdin.destroy();
          createApplicationAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})( DESTINATION_PATH );

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */
function createApplicationAt(path) {
  // cli messages
  console.log();
  process.on( 'exit', function () {
    console.log();
    console.log('   install dependencies:');
    console.log('     $ cd %s && npm install', path);
    console.log();
    console.log('   run the app:');
    console.log('     $ DEBUG=' + APP_NAME + ' ./bin/www');
    console.log();
  });

  // application generator
  mkdir( path, function () {
    generatePublicAssets( path );
    generateRoutes( path );
    generateViews( path, program.template );
    setCssEngineSupport( path, program.css );

    generatePackage( path, program.template, program.css );
    generateApp( path, program.template );
  });
}

// ----------------------------------------------------------------------------
// Generator Helper Functions -------------------------------------------------
// ----------------------------------------------------------------------------

/**
 * Creates a public assets directory at the given path.
 *
 * @param {String} path 
 */
function generatePublicAssets(path) {
  mkdir( path + '/public' );
  mkdir( path + '/public/javascripts' );
  mkdir( path + '/public/images' );
  mkdir( path + '/public/stylesheets', function () {
    
    if ( program.css === 'less' ) {
      write( path + '/public/stylesheets/style.less', LESS );
    } else if ( program.css === 'stylus' ) {
      write( path + '/public/stylesheets/style.styl', STYLUS );
    } else if ( program.css === 'compass' ) {
      write( path + '/public/stylesheets/style.scss', COMPASS );
    } else {
      write( path + '/public/stylesheets/style.css', CSS );
    }

  });
}

/** 
 * Creates a routes directory at the given path.
 *
 * @param {String} path
 */
function generateRoutes(path) {
  mkdir( path + '/routes', function () {
    write( path + '/routes/index.js', INDEX );
    write( path + '/routes/users.js', USERS );
  });
}

/**
 * Creates a views directory at the given path 
 *
 * @param {String} path
 * @param {String} template engine
 */
function generateViews(path, tmpl) {
  mkdir( path + '/views', function () {
    if ( tmpl === 'ejs' ) {
      copy_template( 'ejs/index.ejs', path + '/views/index.ejs' );
      copy_template( 'ejs/error.ejs', path + '/views/error.ejs' );
    } else if ( tmpl === 'hjs' ) {
      copy_template( 'hogan/index.hjs', path + '/views/index.hjs' );
      copy_template( 'hogan/error.hjs', path + '/views/error.hjs' );
    } else if ( tmpl === 'hbs' ) {
      copy_template( 'hbs/index.hbs', path + '/views/index.hbs' );
      copy_template( 'hbs/layout.hbs', path + '/views/layout.hbs' );
      copy_template( 'hbs/error.hbs', path + '/views/error.hbs' );
    } else {
      copy_template( 'jade/index.jade', path + '/views/index.jade' );
      copy_template( 'jade/layout.jade', path + '/views/layout.jade' );
      copy_template( 'jade/error.jade', path + '/views/error.jade' );
    }
  });
}

/** 
 * Sets which CSS engine is supported for the App
 *
 * @param {String} css template engine
 */
function setCssEngineSupport(path, css) {
  // TODO: lines are beyond 80 char
  if ( css === 'less' ) {
    APP = APP.replace('{css}', EOL + 'app.use(require(\'less-middleware\')(path.join(__dirname, \'public\')));');
  } else if ( css === 'stylus' ) {
    APP = APP.replace('{css}', EOL + 'app.use(require(\'stylus\').middleware(path.join(__dirname, \'public\')));');
  } else if ( css === 'compass' ) {
    APP = APP.replace('{css}', EOL + 'app.use(require(\'node-compass\')({mode: \'expanded\'}));');
  } else {
    APP = APP.replace('{css}', '');
  }
}

/** 
 * Generates an appropriate package.json file for the express app
 *
 * @param {String} path
 * @param {String} template engine
 * @param {String} css engine
 */
function generatePackage(path, tmpl, css) {
  // package.json
  var pkg = {
      name: APP_NAME
    , version: '0.0.1'
    , private: true
    , scripts: { start: 'node ./bin/www' }
    , dependencies: {
        'express': '~4.2.0',
        'serve-favicon': '~2.0.0',
        'morgan': '~1.0.0',
        'cookie-parser': '~1.0.1',
        'body-parser': '~1.0.0',
        'debug': '~0.7.4'
    }
  }

  // Template engine support
  if ( tmpl === 'ejs' ) {
    pkg.dependencies['ejs'] = '~0.8.5';
  } else if ( tmpl === 'hjs' ) {
    pkg.dependencies['hjs'] = '~0.0.6';
  } else if ( tmpl === 'hbs' ) {
    pkg.dependencies['hbs'] = '~2.7.0';
  } else {
    pkg.dependencies['jade'] = '~1.3.0';
  }

  // CSS engine support
  if ( css === 'less' ) {
    pkg.dependencies['less-middleware'] = '1.0.x';
  } else if ( css === 'compass' ) {
    pkg.dependencies['node-compass'] = '0.2.3';
  } else if ( css === 'stylus' ) {
    pkg.dependencies['stylus'] = '0.42.3';
  }

  // Generate package.json file at path.
  write(path + '/package.json', JSON.stringify(pkg, null, 2));
}

/**
 * Generates app.js file and /bin/www file
 * 
 * @param {String} path
 */
function generateApp(path, tmpl) {
  var tmpl = tmpl || 'jade';
  
  // Template support
  APP = APP.replace('{views}', tmpl );

  write( path + '/app.js', APP );
  mkdir( path + '/bin', function () {
    WWW = WWW.replace( '{name}', APP_NAME );
    write( path + '/bin/www', WWW, 0755 );
  });
}

// ----------------------------------------------------------------------------
// File System Helper Functions -----------------------------------------------
// ----------------------------------------------------------------------------

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */
function write(path, str, mode) {
  fs.writeFile(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */
function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */
function abort(str) {
  console.error(str);
  process.exit(1);
}
