#!/usr/bin/env node

var program = require('commander');
var mkdirp  = require('mkdirp');
var os      = require('os');
var fs      = require('fs');
var path    = require('path');

var pkg     = require('../package.json');
var version = pkg.version;

// CLI ------------------------------------------------------------------------
program
  .version(version)
  .usage('[options] [dir]')
  .option('-T, --template <engine>', 'add template <engine> support (jade|ejs|hbs|hogan)  (defaults to jade)')
  .option('-c, --css <engine>', 'add stylesheet <engine> support (less|stylus|compass) (defaults to plain css)')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

// Path -----------------------------------------------------------------------
var destination_path = program.args.shift() || '.';

// App name -------------------------------------------------------------------
var app_name = path.basename(path.resolve(destination_path));

// end-of-line code
// TODO: swap to uppercase format
var eol = os.EOL


function load_template(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

var index = load_template('js/routes/index.js');
var users = load_template('js/routes/users.js');

/// css
var css = fs.readFileSync(__dirname + '/../templates/css/style.css', 'utf-8');
var less = fs.readFileSync(__dirname + '/../templates/css/style.less', 'utf-8');
var stylus = fs.readFileSync(__dirname + '/../templates/css/style.styl', 'utf-8');
var compass = fs.readFileSync(__dirname + '/../templates/css/style.scss', 'utf-8');

var app = fs.readFileSync(__dirname + '/../templates/js/app.js', 'utf-8');
var www = fs.readFileSync(__dirname + '/../templates/js/www', 'utf-8');

// application generator ------------------------------------------------------
(function createApplication(path) {
  emptyDirectory( path, function (empty) {
    if ( empty || program.force ) {
      createApplicationAt( path );
    } else {
      program.confirm('destination is not empty, continue? ', function (ok) {
        if ( ok ) {
          process.stdin.destroy();
          createApplicationAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})( destination_path );

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */
function createApplicationAt(path) {
  console.log();
  process.on('exit', function () {
    console.log();
    console.log('   install dependencies:');
    console.log('     $ cd %s && npm install', path);
    console.log();
    console.log('   run the app:');
    console.log('     $ DEBUG=' + app_name + ' ./bin/www');
    console.log();
  });

  mkdir( path, function () {

    generatePublicAssets( path );
    generateRoutes( path );
    generateViews( path, program.template );

    setCssEngineSupport( program.css );

    // Template support
    app = app.replace('{views}', program.template);

    // package.json
    var pkg = {
        name: app_name
      , version: '0.0.1'
      , private: true
      , scripts: { start: 'node ./bin/www' }
      , dependencies: {
          'express': '~4.2.0',
          'serve-favicon': '~2.0.0',
          'morgan': '~1.0.0',
          'cookie-parser': '~1.0.1',
          'body-parser': '~1.0.0',
          'debug': '~0.7.4'
      }
    }

    switch (program.template) {
      case 'jade':
        pkg.dependencies['jade'] = '~1.3.0';
        break;
      case 'ejs':
        pkg.dependencies['ejs'] = '~0.8.5';
        break;
      case 'hjs':
        pkg.dependencies['hjs'] = '~0.0.6';
        break;
      case 'hbs':
        pkg.dependencies['hbs'] = '~2.7.0';
        break;
      default:
    }

    // CSS Engine support
    switch (program.css) {
      case 'less':
        pkg.dependencies['less-middleware'] = '1.0.x';
        break;
      case 'compass':
        pkg.dependencies['node-compass'] = '0.2.3';
        break;
      case 'stylus':
        pkg.dependencies['stylus'] = '0.42.3';
        break;
      default:
    }

    write(path + '/package.json', JSON.stringify(pkg, null, 2));
    write(path + '/app.js', app);
    mkdir(path + '/bin', function(){
      www = www.replace('{name}', app_name);
      write(path + '/bin/www', www, 0755);
    });

  });
}

// ----------------------------------------------------------------------------
// Generator Helper Functions -------------------------------------------------
// ----------------------------------------------------------------------------

/**
 * Creates a public assets directory at the given path.
 *
 * @param {String} path 
 */

function generatePublicAssets( path ) {
  mkdir( path + '/public' );
  mkdir( path + '/public/javascripts' );
  mkdir( path + '/public/images' );
  mkdir( path + '/public/stylesheets', function () {
    
    if ( program.css === 'less' ) {
      write(path + '/public/stylesheets/style.less', less);
    } else if ( program.css === 'stylus' ) {
      write(path + '/public/stylesheets/style.styl', stylus);
    } else if ( program.css === 'compass' ) {
      write(path + '/public/stylesheets/style.scss', compass);
    } else {
      write(path + '/public/stylesheets/style.css', css);
    }

  });
}

/** 
 * Creates a routes directory at the given path.
 *
 * @param {String} path
 */

function generateRoutes( path ) {
  mkdir( path + '/routes', function () {
    write(path + '/routes/index.js', index);
    write(path + '/routes/users.js', users);
  });
}

/**
 * Creates a views directory at the given path 
 *
 * @param {String} path
 * @param {String} template engine
 */

function generateViews( path, tmpl ) {
  mkdir( path + '/views', function () {
    if ( tmpl === 'ejs' ) {
      copy_template('ejs/index.ejs', path + '/views/index.ejs');
      copy_template('ejs/error.ejs', path + '/views/error.ejs');
    } else if ( tmpl === 'hjs' ) {
      copy_template('hogan/index.hjs', path + '/views/index.hjs');
      copy_template('hogan/error.hjs', path + '/views/error.hjs');
    } else if ( tmpl === 'hbs' ) {
      copy_template('hbs/index.hbs', path + '/views/index.hbs');
      copy_template('hbs/layout.hbs', path + '/views/layout.hbs');
      copy_template('hbs/error.hbs', path + '/views/error.hbs');
    } else {
      copy_template('jade/index.jade', path + '/views/index.jade');
      copy_template('jade/layout.jade', path + '/views/layout.jade');
      copy_template('jade/error.jade', path + '/views/error.jade');
    }
  });
}

/** 
 * Sets which CSS engine is supported for the App
 *
 * @param {String} css template engine
 */

function setCssEngineSupport( css ) {
  // TODO: lines are beyond 80 char
  if ( css === 'less' ) {
    app = app.replace('{css}', eol + 'app.use(require(\'less-middleware\')(path.join(__dirname, \'public\')));');
  } else if ( css === 'stylus' ) {
    app = app.replace('{css}', eol + 'app.use(require(\'stylus\').middleware(path.join(__dirname, \'public\')));');
  } else if ( css === 'compass' ) {
    app = app.replace('{css}', eol + 'app.use(require(\'node-compass\')({mode: \'expanded\'}));');
  } else {
    app = app.replace('{css}', '');
  }
}

// TODO: rename this
// ----------------------------------------------------------------------------
// ???? Helper Functions -------------------------------------------------
// ----------------------------------------------------------------------------

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFile(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}
